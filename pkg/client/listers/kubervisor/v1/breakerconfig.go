/*
MIT License

Copyright (c) 2018 PodKubervisor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// Code generated by lister-gen. DO NOT EDIT.

// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/amadeusitgroup/podkubervisor/pkg/api/kubervisor/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BreakerConfigLister helps list BreakerConfigs.
type BreakerConfigLister interface {
	// List lists all BreakerConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1.BreakerConfig, err error)
	// BreakerConfigs returns an object that can list and get BreakerConfigs.
	BreakerConfigs(namespace string) BreakerConfigNamespaceLister
	BreakerConfigListerExpansion
}

// breakerConfigLister implements the BreakerConfigLister interface.
type breakerConfigLister struct {
	indexer cache.Indexer
}

// NewBreakerConfigLister returns a new BreakerConfigLister.
func NewBreakerConfigLister(indexer cache.Indexer) BreakerConfigLister {
	return &breakerConfigLister{indexer: indexer}
}

// List lists all BreakerConfigs in the indexer.
func (s *breakerConfigLister) List(selector labels.Selector) (ret []*v1.BreakerConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BreakerConfig))
	})
	return ret, err
}

// BreakerConfigs returns an object that can list and get BreakerConfigs.
func (s *breakerConfigLister) BreakerConfigs(namespace string) BreakerConfigNamespaceLister {
	return breakerConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BreakerConfigNamespaceLister helps list and get BreakerConfigs.
type BreakerConfigNamespaceLister interface {
	// List lists all BreakerConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.BreakerConfig, err error)
	// Get retrieves the BreakerConfig from the indexer for a given namespace and name.
	Get(name string) (*v1.BreakerConfig, error)
	BreakerConfigNamespaceListerExpansion
}

// breakerConfigNamespaceLister implements the BreakerConfigNamespaceLister
// interface.
type breakerConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BreakerConfigs in the indexer for a given namespace.
func (s breakerConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.BreakerConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BreakerConfig))
	})
	return ret, err
}

// Get retrieves the BreakerConfig from the indexer for a given namespace and name.
func (s breakerConfigNamespaceLister) Get(name string) (*v1.BreakerConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("breakerconfig"), name)
	}
	return obj.(*v1.BreakerConfig), nil
}
